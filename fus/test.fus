
##################################################################
package: cycle1

# NOTE: no def reordering required (because no refs are inplace)

# cycle1_A
typedef A: struct:
    b: @B

# cycle1_B
typedef B: struct:
    a: @A


##################################################################
package: cycle2

# NOTE: cycle2_C should be reordered to come before cycle2_A

# cycle2_A
typedef A: struct:
    b: inplace @B

# cycle2_B
typedef B: @C

# cycle2_C
typedef C: struct:
    whatever: int


##################################################################
package: cycle3

# NOTE: cycle3_B should be reordered to come before cycle3_A

# cycle3_A
typedef A: @B

# cycle3_B
typedef B: int


##################################################################
package: test

from util_math:
    # The name "complex" is now bound to util_math_complex
    complex


# test_int
typedef int: int

# test_integer
typedef integer: @int

# test_intarray
# arrayof_int
typedef intarray: array: int

# test_intarray2
# arrayof_int
typedef intarray2: array: int


# test_grid
typedef grid: struct:
    w: int
    h: int

    # test_grid_cells_elem
    # arrayof_inplace_test_grid_cells_elem
    # arrayof_arrayof_inplace_test_grid_cells_elem
    cells: array: array: inplace struct:
        # any
        data: any


typedef empty_struct: struct:
    # No fields...
    # Resulting C struct has an "int dummy" field?..
    # Or no C struct is even generated?..
    # (I think the former is the case. Maybe "int _"?..)

typedef empty_union: union:
    # No fields...
    # A C struct is created, with a tag field.
    # Does the struct have a union?.. with a dummy field?..
    # Is a C enum created?


# test_country
typedef country: struct:
    name: sym

    # test_grid
    grid: inplace @grid

    # util_math_complex
    coord: @complex

    # no type!.. in fact, no field is created!..
    unused: void

    # test_country_areas_elem
    # arrayof_test_country_areas_elem
    areas: array: struct:
        name: sym

        # struct test_country_areas_elem_details
        details: union:
            # struct test_country_areas_elem_details_territory
            territory: struct:
                # arrayof_int
                years: array: int

                # math_real
                amount: @@util_math_real

            # struct test_country_areas_elem_details_province
            province: struct:
                # arrayof_sym
                # (So, is sym_t typedef'd as "const char *"?..)
                names: array: sym
